# coding: utf-8

"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from graphsense.configuration import Configuration


class Tx(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coinbase': 'bool',
        'height': 'int',
        'inputs': 'list[TxValue]',
        'outputs': 'list[TxValue]',
        'timestamp': 'int',
        'total_input': 'Values',
        'total_output': 'Values',
        'tx_hash': 'str'
    }

    attribute_map = {
        'coinbase': 'coinbase',
        'height': 'height',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'timestamp': 'timestamp',
        'total_input': 'total_input',
        'total_output': 'total_output',
        'tx_hash': 'tx_hash'
    }

    def __init__(self, coinbase=None, height=None, inputs=None, outputs=None, timestamp=None, total_input=None, total_output=None, tx_hash=None, local_vars_configuration=None):  # noqa: E501
        """Tx - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coinbase = None
        self._height = None
        self._inputs = None
        self._outputs = None
        self._timestamp = None
        self._total_input = None
        self._total_output = None
        self._tx_hash = None
        self.discriminator = None

        self.coinbase = coinbase
        self.height = height
        self.inputs = inputs
        self.outputs = outputs
        self.timestamp = timestamp
        self.total_input = total_input
        self.total_output = total_output
        self.tx_hash = tx_hash

    @property
    def coinbase(self):
        """Gets the coinbase of this Tx.  # noqa: E501

        Coinbase transaction flag  # noqa: E501

        :return: The coinbase of this Tx.  # noqa: E501
        :rtype: bool
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this Tx.

        Coinbase transaction flag  # noqa: E501

        :param coinbase: The coinbase of this Tx.  # noqa: E501
        :type coinbase: bool
        """
        if self.local_vars_configuration.client_side_validation and coinbase is None:  # noqa: E501
            raise ValueError("Invalid value for `coinbase`, must not be `None`")  # noqa: E501

        self._coinbase = coinbase

    @property
    def height(self):
        """Gets the height of this Tx.  # noqa: E501

        Height  # noqa: E501

        :return: The height of this Tx.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Tx.

        Height  # noqa: E501

        :param height: The height of this Tx.  # noqa: E501
        :type height: int
        """
        if self.local_vars_configuration.client_side_validation and height is None:  # noqa: E501
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < 1):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._height = height

    @property
    def inputs(self):
        """Gets the inputs of this Tx.  # noqa: E501

        Transaction inputs/outputs  # noqa: E501

        :return: The inputs of this Tx.  # noqa: E501
        :rtype: list[TxValue]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :param inputs: The inputs of this Tx.  # noqa: E501
        :type inputs: list[TxValue]
        """
        if self.local_vars_configuration.client_side_validation and inputs is None:  # noqa: E501
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this Tx.  # noqa: E501

        Transaction inputs/outputs  # noqa: E501

        :return: The outputs of this Tx.  # noqa: E501
        :rtype: list[TxValue]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :param outputs: The outputs of this Tx.  # noqa: E501
        :type outputs: list[TxValue]
        """
        if self.local_vars_configuration.client_side_validation and outputs is None:  # noqa: E501
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs

    @property
    def timestamp(self):
        """Gets the timestamp of this Tx.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this Tx.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Tx.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this Tx.  # noqa: E501
        :type timestamp: int
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def total_input(self):
        """Gets the total_input of this Tx.  # noqa: E501


        :return: The total_input of this Tx.  # noqa: E501
        :rtype: Values
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this Tx.


        :param total_input: The total_input of this Tx.  # noqa: E501
        :type total_input: Values
        """
        if self.local_vars_configuration.client_side_validation and total_input is None:  # noqa: E501
            raise ValueError("Invalid value for `total_input`, must not be `None`")  # noqa: E501

        self._total_input = total_input

    @property
    def total_output(self):
        """Gets the total_output of this Tx.  # noqa: E501


        :return: The total_output of this Tx.  # noqa: E501
        :rtype: Values
        """
        return self._total_output

    @total_output.setter
    def total_output(self, total_output):
        """Sets the total_output of this Tx.


        :param total_output: The total_output of this Tx.  # noqa: E501
        :type total_output: Values
        """
        if self.local_vars_configuration.client_side_validation and total_output is None:  # noqa: E501
            raise ValueError("Invalid value for `total_output`, must not be `None`")  # noqa: E501

        self._total_output = total_output

    @property
    def tx_hash(self):
        """Gets the tx_hash of this Tx.  # noqa: E501

        Transaction hash  # noqa: E501

        :return: The tx_hash of this Tx.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this Tx.

        Transaction hash  # noqa: E501

        :param tx_hash: The tx_hash of this Tx.  # noqa: E501
        :type tx_hash: str
        """
        if self.local_vars_configuration.client_side_validation and tx_hash is None:  # noqa: E501
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tx):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tx):
            return True

        return self.to_dict() != other.to_dict()
