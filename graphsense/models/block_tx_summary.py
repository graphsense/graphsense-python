# coding: utf-8

"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from graphsense.configuration import Configuration


class BlockTxSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'no_inputs': 'int',
        'no_outputs': 'int',
        'total_input': 'Values',
        'total_output': 'Values',
        'tx_hash': 'str'
    }

    attribute_map = {
        'no_inputs': 'no_inputs',
        'no_outputs': 'no_outputs',
        'total_input': 'total_input',
        'total_output': 'total_output',
        'tx_hash': 'tx_hash'
    }

    def __init__(self, no_inputs=None, no_outputs=None, total_input=None, total_output=None, tx_hash=None, local_vars_configuration=None):  # noqa: E501
        """BlockTxSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._no_inputs = None
        self._no_outputs = None
        self._total_input = None
        self._total_output = None
        self._tx_hash = None
        self.discriminator = None

        if no_inputs is not None:
            self.no_inputs = no_inputs
        if no_outputs is not None:
            self.no_outputs = no_outputs
        if total_input is not None:
            self.total_input = total_input
        if total_output is not None:
            self.total_output = total_output
        if tx_hash is not None:
            self.tx_hash = tx_hash

    @property
    def no_inputs(self):
        """Gets the no_inputs of this BlockTxSummary.  # noqa: E501


        :return: The no_inputs of this BlockTxSummary.  # noqa: E501
        :rtype: int
        """
        return self._no_inputs

    @no_inputs.setter
    def no_inputs(self, no_inputs):
        """Sets the no_inputs of this BlockTxSummary.


        :param no_inputs: The no_inputs of this BlockTxSummary.  # noqa: E501
        :type no_inputs: int
        """

        self._no_inputs = no_inputs

    @property
    def no_outputs(self):
        """Gets the no_outputs of this BlockTxSummary.  # noqa: E501


        :return: The no_outputs of this BlockTxSummary.  # noqa: E501
        :rtype: int
        """
        return self._no_outputs

    @no_outputs.setter
    def no_outputs(self, no_outputs):
        """Sets the no_outputs of this BlockTxSummary.


        :param no_outputs: The no_outputs of this BlockTxSummary.  # noqa: E501
        :type no_outputs: int
        """

        self._no_outputs = no_outputs

    @property
    def total_input(self):
        """Gets the total_input of this BlockTxSummary.  # noqa: E501


        :return: The total_input of this BlockTxSummary.  # noqa: E501
        :rtype: Values
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this BlockTxSummary.


        :param total_input: The total_input of this BlockTxSummary.  # noqa: E501
        :type total_input: Values
        """

        self._total_input = total_input

    @property
    def total_output(self):
        """Gets the total_output of this BlockTxSummary.  # noqa: E501


        :return: The total_output of this BlockTxSummary.  # noqa: E501
        :rtype: Values
        """
        return self._total_output

    @total_output.setter
    def total_output(self, total_output):
        """Sets the total_output of this BlockTxSummary.


        :param total_output: The total_output of this BlockTxSummary.  # noqa: E501
        :type total_output: Values
        """

        self._total_output = total_output

    @property
    def tx_hash(self):
        """Gets the tx_hash of this BlockTxSummary.  # noqa: E501


        :return: The tx_hash of this BlockTxSummary.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this BlockTxSummary.


        :param tx_hash: The tx_hash of this BlockTxSummary.  # noqa: E501
        :type tx_hash: str
        """

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockTxSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BlockTxSummary):
            return True

        return self.to_dict() != other.to_dict()
