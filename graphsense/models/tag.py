# coding: utf-8

"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.5
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from graphsense.configuration import Configuration


class Tag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abuse': 'str',
        'active': 'bool',
        'address': 'str',
        'category': 'str',
        'currency': 'str',
        'label': 'str',
        'lastmod': 'int',
        'source': 'str',
        'tagpack_uri': 'str'
    }

    attribute_map = {
        'abuse': 'abuse',
        'active': 'active',
        'address': 'address',
        'category': 'category',
        'currency': 'currency',
        'label': 'label',
        'lastmod': 'lastmod',
        'source': 'source',
        'tagpack_uri': 'tagpack_uri'
    }

    def __init__(self, abuse=None, active=None, address=None, category=None, currency=None, label=None, lastmod=None, source=None, tagpack_uri=None, local_vars_configuration=None):  # noqa: E501
        """Tag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abuse = None
        self._active = None
        self._address = None
        self._category = None
        self._currency = None
        self._label = None
        self._lastmod = None
        self._source = None
        self._tagpack_uri = None
        self.discriminator = None

        if abuse is not None:
            self.abuse = abuse
        self.active = active
        self.address = address
        if category is not None:
            self.category = category
        self.currency = currency
        self.label = label
        if lastmod is not None:
            self.lastmod = lastmod
        if source is not None:
            self.source = source
        if tagpack_uri is not None:
            self.tagpack_uri = tagpack_uri

    @property
    def abuse(self):
        """Gets the abuse of this Tag.  # noqa: E501

        Abuses  # noqa: E501

        :return: The abuse of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._abuse

    @abuse.setter
    def abuse(self, abuse):
        """Sets the abuse of this Tag.

        Abuses  # noqa: E501

        :param abuse: The abuse of this Tag.  # noqa: E501
        :type abuse: str
        """

        self._abuse = abuse

    @property
    def active(self):
        """Gets the active of this Tag.  # noqa: E501

        whether the address has been ever used  # noqa: E501

        :return: The active of this Tag.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Tag.

        whether the address has been ever used  # noqa: E501

        :param active: The active of this Tag.  # noqa: E501
        :type active: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def address(self):
        """Gets the address of this Tag.  # noqa: E501

        Address  # noqa: E501

        :return: The address of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Tag.

        Address  # noqa: E501

        :param address: The address of this Tag.  # noqa: E501
        :type address: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def category(self):
        """Gets the category of this Tag.  # noqa: E501

        Category  # noqa: E501

        :return: The category of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Tag.

        Category  # noqa: E501

        :param category: The category of this Tag.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def currency(self):
        """Gets the currency of this Tag.  # noqa: E501

        Currency  # noqa: E501

        :return: The currency of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Tag.

        Currency  # noqa: E501

        :param currency: The currency of this Tag.  # noqa: E501
        :type currency: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def label(self):
        """Gets the label of this Tag.  # noqa: E501

        Label  # noqa: E501

        :return: The label of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Tag.

        Label  # noqa: E501

        :param label: The label of this Tag.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def lastmod(self):
        """Gets the lastmod of this Tag.  # noqa: E501

        Last modified  # noqa: E501

        :return: The lastmod of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._lastmod

    @lastmod.setter
    def lastmod(self, lastmod):
        """Sets the lastmod of this Tag.

        Last modified  # noqa: E501

        :param lastmod: The lastmod of this Tag.  # noqa: E501
        :type lastmod: int
        """

        self._lastmod = lastmod

    @property
    def source(self):
        """Gets the source of this Tag.  # noqa: E501

        Source  # noqa: E501

        :return: The source of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Tag.

        Source  # noqa: E501

        :param source: The source of this Tag.  # noqa: E501
        :type source: str
        """

        self._source = source

    @property
    def tagpack_uri(self):
        """Gets the tagpack_uri of this Tag.  # noqa: E501

        Tagpack URI  # noqa: E501

        :return: The tagpack_uri of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._tagpack_uri

    @tagpack_uri.setter
    def tagpack_uri(self, tagpack_uri):
        """Sets the tagpack_uri of this Tag.

        Tagpack URI  # noqa: E501

        :param tagpack_uri: The tagpack_uri of this Tag.  # noqa: E501
        :type tagpack_uri: str
        """

        self._tagpack_uri = tagpack_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tag):
            return True

        return self.to_dict() != other.to_dict()
