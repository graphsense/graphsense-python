# coding: utf-8

"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from graphsense.configuration import Configuration


class Entity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'Values',
        'entity': 'str',
        'first_tx': 'TxSummary',
        'in_degree': 'int',
        'last_tx': 'TxSummary',
        'no_addresses': 'int',
        'no_incoming_txs': 'int',
        'no_outgoing_txs': 'int',
        'out_degree': 'int',
        'total_received': 'Values',
        'total_spent': 'Values'
    }

    attribute_map = {
        'balance': 'balance',
        'entity': 'entity',
        'first_tx': 'first_tx',
        'in_degree': 'in_degree',
        'last_tx': 'last_tx',
        'no_addresses': 'no_addresses',
        'no_incoming_txs': 'no_incoming_txs',
        'no_outgoing_txs': 'no_outgoing_txs',
        'out_degree': 'out_degree',
        'total_received': 'total_received',
        'total_spent': 'total_spent'
    }

    def __init__(self, balance=None, entity=None, first_tx=None, in_degree=None, last_tx=None, no_addresses=None, no_incoming_txs=None, no_outgoing_txs=None, out_degree=None, total_received=None, total_spent=None, local_vars_configuration=None):  # noqa: E501
        """Entity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._balance = None
        self._entity = None
        self._first_tx = None
        self._in_degree = None
        self._last_tx = None
        self._no_addresses = None
        self._no_incoming_txs = None
        self._no_outgoing_txs = None
        self._out_degree = None
        self._total_received = None
        self._total_spent = None
        self.discriminator = None

        self.balance = balance
        self.entity = entity
        self.first_tx = first_tx
        self.in_degree = in_degree
        self.last_tx = last_tx
        self.no_addresses = no_addresses
        self.no_incoming_txs = no_incoming_txs
        self.no_outgoing_txs = no_outgoing_txs
        self.out_degree = out_degree
        self.total_received = total_received
        self.total_spent = total_spent

    @property
    def balance(self):
        """Gets the balance of this Entity.  # noqa: E501


        :return: The balance of this Entity.  # noqa: E501
        :rtype: Values
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Entity.


        :param balance: The balance of this Entity.  # noqa: E501
        :type balance: Values
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def entity(self):
        """Gets the entity of this Entity.  # noqa: E501

        Entity id  # noqa: E501

        :return: The entity of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Entity.

        Entity id  # noqa: E501

        :param entity: The entity of this Entity.  # noqa: E501
        :type entity: str
        """
        if self.local_vars_configuration.client_side_validation and entity is None:  # noqa: E501
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def first_tx(self):
        """Gets the first_tx of this Entity.  # noqa: E501


        :return: The first_tx of this Entity.  # noqa: E501
        :rtype: TxSummary
        """
        return self._first_tx

    @first_tx.setter
    def first_tx(self, first_tx):
        """Sets the first_tx of this Entity.


        :param first_tx: The first_tx of this Entity.  # noqa: E501
        :type first_tx: TxSummary
        """
        if self.local_vars_configuration.client_side_validation and first_tx is None:  # noqa: E501
            raise ValueError("Invalid value for `first_tx`, must not be `None`")  # noqa: E501

        self._first_tx = first_tx

    @property
    def in_degree(self):
        """Gets the in_degree of this Entity.  # noqa: E501


        :return: The in_degree of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._in_degree

    @in_degree.setter
    def in_degree(self, in_degree):
        """Sets the in_degree of this Entity.


        :param in_degree: The in_degree of this Entity.  # noqa: E501
        :type in_degree: int
        """
        if self.local_vars_configuration.client_side_validation and in_degree is None:  # noqa: E501
            raise ValueError("Invalid value for `in_degree`, must not be `None`")  # noqa: E501

        self._in_degree = in_degree

    @property
    def last_tx(self):
        """Gets the last_tx of this Entity.  # noqa: E501


        :return: The last_tx of this Entity.  # noqa: E501
        :rtype: TxSummary
        """
        return self._last_tx

    @last_tx.setter
    def last_tx(self, last_tx):
        """Sets the last_tx of this Entity.


        :param last_tx: The last_tx of this Entity.  # noqa: E501
        :type last_tx: TxSummary
        """
        if self.local_vars_configuration.client_side_validation and last_tx is None:  # noqa: E501
            raise ValueError("Invalid value for `last_tx`, must not be `None`")  # noqa: E501

        self._last_tx = last_tx

    @property
    def no_addresses(self):
        """Gets the no_addresses of this Entity.  # noqa: E501


        :return: The no_addresses of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._no_addresses

    @no_addresses.setter
    def no_addresses(self, no_addresses):
        """Sets the no_addresses of this Entity.


        :param no_addresses: The no_addresses of this Entity.  # noqa: E501
        :type no_addresses: int
        """
        if self.local_vars_configuration.client_side_validation and no_addresses is None:  # noqa: E501
            raise ValueError("Invalid value for `no_addresses`, must not be `None`")  # noqa: E501

        self._no_addresses = no_addresses

    @property
    def no_incoming_txs(self):
        """Gets the no_incoming_txs of this Entity.  # noqa: E501


        :return: The no_incoming_txs of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._no_incoming_txs

    @no_incoming_txs.setter
    def no_incoming_txs(self, no_incoming_txs):
        """Sets the no_incoming_txs of this Entity.


        :param no_incoming_txs: The no_incoming_txs of this Entity.  # noqa: E501
        :type no_incoming_txs: int
        """
        if self.local_vars_configuration.client_side_validation and no_incoming_txs is None:  # noqa: E501
            raise ValueError("Invalid value for `no_incoming_txs`, must not be `None`")  # noqa: E501

        self._no_incoming_txs = no_incoming_txs

    @property
    def no_outgoing_txs(self):
        """Gets the no_outgoing_txs of this Entity.  # noqa: E501


        :return: The no_outgoing_txs of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._no_outgoing_txs

    @no_outgoing_txs.setter
    def no_outgoing_txs(self, no_outgoing_txs):
        """Sets the no_outgoing_txs of this Entity.


        :param no_outgoing_txs: The no_outgoing_txs of this Entity.  # noqa: E501
        :type no_outgoing_txs: int
        """
        if self.local_vars_configuration.client_side_validation and no_outgoing_txs is None:  # noqa: E501
            raise ValueError("Invalid value for `no_outgoing_txs`, must not be `None`")  # noqa: E501

        self._no_outgoing_txs = no_outgoing_txs

    @property
    def out_degree(self):
        """Gets the out_degree of this Entity.  # noqa: E501


        :return: The out_degree of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._out_degree

    @out_degree.setter
    def out_degree(self, out_degree):
        """Sets the out_degree of this Entity.


        :param out_degree: The out_degree of this Entity.  # noqa: E501
        :type out_degree: int
        """
        if self.local_vars_configuration.client_side_validation and out_degree is None:  # noqa: E501
            raise ValueError("Invalid value for `out_degree`, must not be `None`")  # noqa: E501

        self._out_degree = out_degree

    @property
    def total_received(self):
        """Gets the total_received of this Entity.  # noqa: E501


        :return: The total_received of this Entity.  # noqa: E501
        :rtype: Values
        """
        return self._total_received

    @total_received.setter
    def total_received(self, total_received):
        """Sets the total_received of this Entity.


        :param total_received: The total_received of this Entity.  # noqa: E501
        :type total_received: Values
        """
        if self.local_vars_configuration.client_side_validation and total_received is None:  # noqa: E501
            raise ValueError("Invalid value for `total_received`, must not be `None`")  # noqa: E501

        self._total_received = total_received

    @property
    def total_spent(self):
        """Gets the total_spent of this Entity.  # noqa: E501


        :return: The total_spent of this Entity.  # noqa: E501
        :rtype: Values
        """
        return self._total_spent

    @total_spent.setter
    def total_spent(self, total_spent):
        """Sets the total_spent of this Entity.


        :param total_spent: The total_spent of this Entity.  # noqa: E501
        :type total_spent: Values
        """
        if self.local_vars_configuration.client_side_validation and total_spent is None:  # noqa: E501
            raise ValueError("Invalid value for `total_spent`, must not be `None`")  # noqa: E501

        self._total_spent = total_spent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Entity):
            return True

        return self.to_dict() != other.to_dict()
