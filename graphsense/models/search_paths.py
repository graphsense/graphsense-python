# coding: utf-8

"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from graphsense.configuration import Configuration


class SearchPaths(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'matching_addresses': 'list[AddressWithTags]',
        'node': 'EntityWithTags',
        'paths': 'list[SearchPaths]',
        'relation': 'Neighbor'
    }

    attribute_map = {
        'matching_addresses': 'matching_addresses',
        'node': 'node',
        'paths': 'paths',
        'relation': 'relation'
    }

    def __init__(self, matching_addresses=None, node=None, paths=None, relation=None, local_vars_configuration=None):  # noqa: E501
        """SearchPaths - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._matching_addresses = None
        self._node = None
        self._paths = None
        self._relation = None
        self.discriminator = None

        if matching_addresses is not None:
            self.matching_addresses = matching_addresses
        if node is not None:
            self.node = node
        if paths is not None:
            self.paths = paths
        if relation is not None:
            self.relation = relation

    @property
    def matching_addresses(self):
        """Gets the matching_addresses of this SearchPaths.  # noqa: E501


        :return: The matching_addresses of this SearchPaths.  # noqa: E501
        :rtype: list[AddressWithTags]
        """
        return self._matching_addresses

    @matching_addresses.setter
    def matching_addresses(self, matching_addresses):
        """Sets the matching_addresses of this SearchPaths.


        :param matching_addresses: The matching_addresses of this SearchPaths.  # noqa: E501
        :type matching_addresses: list[AddressWithTags]
        """

        self._matching_addresses = matching_addresses

    @property
    def node(self):
        """Gets the node of this SearchPaths.  # noqa: E501


        :return: The node of this SearchPaths.  # noqa: E501
        :rtype: EntityWithTags
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this SearchPaths.


        :param node: The node of this SearchPaths.  # noqa: E501
        :type node: EntityWithTags
        """

        self._node = node

    @property
    def paths(self):
        """Gets the paths of this SearchPaths.  # noqa: E501

        Paths to matching entities  # noqa: E501

        :return: The paths of this SearchPaths.  # noqa: E501
        :rtype: list[SearchPaths]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this SearchPaths.

        Paths to matching entities  # noqa: E501

        :param paths: The paths of this SearchPaths.  # noqa: E501
        :type paths: list[SearchPaths]
        """

        self._paths = paths

    @property
    def relation(self):
        """Gets the relation of this SearchPaths.  # noqa: E501


        :return: The relation of this SearchPaths.  # noqa: E501
        :rtype: Neighbor
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this SearchPaths.


        :param relation: The relation of this SearchPaths.  # noqa: E501
        :type relation: Neighbor
        """

        self._relation = relation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchPaths):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchPaths):
            return True

        return self.to_dict() != other.to_dict()
