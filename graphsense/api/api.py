"""
    GraphSense API

    GraphSense API provides programmatic access to various ledgers' addresses, entities, blocks, transactions and tags for automated and highly efficient forensics tasks.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: contact@ikna.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
import pandas

from graphsense.api_client import ApiClient, Endpoint as _Endpoint
from graphsense.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from graphsense.model.actor import Actor
from graphsense.model.address import Address
from graphsense.model.address_tags import AddressTags
from graphsense.model.address_txs import AddressTxs
from graphsense.model.block import Block
from graphsense.model.concept import Concept
from graphsense.model.entity import Entity
from graphsense.model.entity_addresses import EntityAddresses
from graphsense.model.height import Height
from graphsense.model.links import Links
from graphsense.model.neighbor_addresses import NeighborAddresses
from graphsense.model.neighbor_entities import NeighborEntities
from graphsense.model.rates import Rates
from graphsense.model.search_result import SearchResult
from graphsense.model.search_result_level1 import SearchResultLevel1
from graphsense.model.stats import Stats
from graphsense.model.taxonomy import Taxonomy
from graphsense.model.token_configs import TokenConfigs
from graphsense.model.tx import Tx
from graphsense.model.tx_values import TxValues
from graphsense.model.txs_account import TxsAccount


class Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __bulk_csv(
            self,
            currency,
            operation,
            num_pages,
            body,
            **kwargs
        ):
            """Get data as CSV in bulk  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_csv(currency, operation, num_pages, body, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                operation (str): The operation to execute in bulk
                num_pages (int): Number of pages to retrieve for operations with list response
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Map of the operation's parameter names to (arrays of) values

            Keyword Args:
                ck (str): for dev only. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['operation'] = \
                operation
            kwargs['num_pages'] = \
                num_pages
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.bulk_csv = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/bulk.csv/{operation}',
                'operation_id': 'bulk_csv',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'operation',
                    'num_pages',
                    'body',
                    'ck',
                ],
                'required': [
                    'currency',
                    'operation',
                    'num_pages',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'operation',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('operation',): {

                        "GET_BLOCK": "get_block",
                        "LIST_BLOCK_TXS": "list_block_txs",
                        "GET_ADDRESS": "get_address",
                        "LIST_ADDRESS_TXS": "list_address_txs",
                        "LIST_TAGS_BY_ADDRESS": "list_tags_by_address",
                        "LIST_ADDRESS_NEIGHBORS": "list_address_neighbors",
                        "GET_ADDRESS_ENTITY": "get_address_entity",
                        "LIST_ADDRESS_LINKS": "list_address_links",
                        "GET_ENTITY": "get_entity",
                        "LIST_ADDRESS_TAGS_BY_ENTITY": "list_address_tags_by_entity",
                        "LIST_ENTITY_NEIGHBORS": "list_entity_neighbors",
                        "LIST_ENTITY_TXS": "list_entity_txs",
                        "LIST_ENTITY_LINKS": "list_entity_links",
                        "LIST_ENTITY_ADDRESSES": "list_entity_addresses",
                        "GET_TX": "get_tx",
                        "GET_TX_IO": "get_tx_io",
                        "GET_EXCHANGE_RATES": "get_exchange_rates"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'operation':
                        (str,),
                    'num_pages':
                        (int,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'ck':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'operation': 'operation',
                    'num_pages': 'num_pages',
                    'ck': 'ck',
                },
                'location_map': {
                    'currency': 'path',
                    'operation': 'path',
                    'num_pages': 'query',
                    'body': 'body',
                    'ck': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_csv
        )

        def __bulk_json(
            self,
            currency,
            operation,
            num_pages,
            body,
            **kwargs
        ):
            """Get data as JSON in bulk  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bulk_json(currency, operation, num_pages, body, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                operation (str): The operation to execute in bulk
                num_pages (int): Number of pages to retrieve for operations with list response
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Map of the operation's parameter names to (arrays of) values

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (bool, date, datetime, dict, float, int, list, str, none_type)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['operation'] = \
                operation
            kwargs['num_pages'] = \
                num_pages
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.bulk_json = _Endpoint(
            settings={
                'response_type': ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/bulk.json/{operation}',
                'operation_id': 'bulk_json',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'operation',
                    'num_pages',
                    'body',
                ],
                'required': [
                    'currency',
                    'operation',
                    'num_pages',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'operation',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('operation',): {

                        "GET_BLOCK": "get_block",
                        "LIST_BLOCK_TXS": "list_block_txs",
                        "GET_ADDRESS": "get_address",
                        "LIST_ADDRESS_TXS": "list_address_txs",
                        "LIST_TAGS_BY_ADDRESS": "list_tags_by_address",
                        "LIST_ADDRESS_NEIGHBORS": "list_address_neighbors",
                        "GET_ADDRESS_ENTITY": "get_address_entity",
                        "LIST_ADDRESS_LINKS": "list_address_links",
                        "GET_ENTITY": "get_entity",
                        "LIST_ADDRESS_TAGS_BY_ENTITY": "list_address_tags_by_entity",
                        "LIST_ENTITY_NEIGHBORS": "list_entity_neighbors",
                        "LIST_ENTITY_TXS": "list_entity_txs",
                        "LIST_ENTITY_LINKS": "list_entity_links",
                        "LIST_ENTITY_ADDRESSES": "list_entity_addresses",
                        "GET_TX": "get_tx",
                        "GET_TX_IO": "get_tx_io",
                        "GET_EXCHANGE_RATES": "get_exchange_rates"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'operation':
                        (str,),
                    'num_pages':
                        (int,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'operation': 'operation',
                    'num_pages': 'num_pages',
                },
                'location_map': {
                    'currency': 'path',
                    'operation': 'path',
                    'num_pages': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bulk_json
        )

        def __get_actor(
            self,
            actor,
            **kwargs
        ):
            """Returns an actor given its unique id or (unique) label  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_actor(actor, async_req=True)
            >>> result = thread.get()

            Args:
                actor (str): actor id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Actor
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['actor'] = \
                actor
            return self.call_with_http_info(**kwargs)

        self.get_actor = _Endpoint(
            settings={
                'response_type': (Actor,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/tags/actors/{actor}',
                'operation_id': 'get_actor',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'actor',
                ],
                'required': [
                    'actor',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'actor':
                        (str,),
                },
                'attribute_map': {
                    'actor': 'actor',
                },
                'location_map': {
                    'actor': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_actor
        )

        def __get_actor_tags(
            self,
            actor,
            **kwargs
        ):
            """Returns the address tags for a given actor  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_actor_tags(actor, async_req=True)
            >>> result = thread.get()

            Args:
                actor (str): actor id

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTags
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['actor'] = \
                actor
            return self.call_with_http_info(**kwargs)

        self.get_actor_tags = _Endpoint(
            settings={
                'response_type': (AddressTags,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/tags/actors/{actor}/tags',
                'operation_id': 'get_actor_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'actor',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'actor',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'actor':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'actor': 'actor',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'actor': 'path',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_actor_tags
        )

        def __get_address(
            self,
            currency,
            address,
            **kwargs
        ):
            """Get an address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_address(currency, address, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Address
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.get_address = _Endpoint(
            settings={
                'response_type': (Address,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}',
                'operation_id': 'get_address',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                ],
                'required': [
                    'currency',
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_address
        )

        def __get_address_entity(
            self,
            currency,
            address,
            **kwargs
        ):
            """Get the entity of an address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_address_entity(currency, address, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Entity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.get_address_entity = _Endpoint(
            settings={
                'response_type': (Entity,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}/entity',
                'operation_id': 'get_address_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                ],
                'required': [
                    'currency',
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_address_entity
        )

        def __get_block(
            self,
            currency,
            height,
            **kwargs
        ):
            """Get a block by its height  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_block(currency, height, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                height (Height): The block height

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Block
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['height'] = \
                height
            return self.call_with_http_info(**kwargs)

        self.get_block = _Endpoint(
            settings={
                'response_type': (Block,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/blocks/{height}',
                'operation_id': 'get_block',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'height',
                ],
                'required': [
                    'currency',
                    'height',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'height':
                        (Height,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'height': 'height',
                },
                'location_map': {
                    'currency': 'path',
                    'height': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_block
        )

        def __get_entity(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get an entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_entity(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                exclude_best_address_tag (bool): Whether to exclude the best address tag. [optional] if omitted the server will use the default value of False
                include_actors (bool): Whether to include the actors. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Entity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.get_entity = _Endpoint(
            settings={
                'response_type': (Entity,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}',
                'operation_id': 'get_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'exclude_best_address_tag',
                    'include_actors',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'exclude_best_address_tag':
                        (bool,),
                    'include_actors':
                        (bool,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'exclude_best_address_tag': 'exclude_best_address_tag',
                    'include_actors': 'include_actors',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'exclude_best_address_tag': 'query',
                    'include_actors': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_entity
        )

        def __get_exchange_rates(
            self,
            currency,
            height,
            **kwargs
        ):
            """Returns exchange rate for a given height  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_exchange_rates(currency, height, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                height (Height): The block height

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Rates
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['height'] = \
                height
            return self.call_with_http_info(**kwargs)

        self.get_exchange_rates = _Endpoint(
            settings={
                'response_type': (Rates,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/rates/{height}',
                'operation_id': 'get_exchange_rates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'height',
                ],
                'required': [
                    'currency',
                    'height',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'height':
                        (Height,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'height': 'height',
                },
                'location_map': {
                    'currency': 'path',
                    'height': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_exchange_rates
        )

        def __get_statistics(
            self,
            **kwargs
        ):
            """Get statistics of supported currencies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_statistics(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Stats
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_statistics = _Endpoint(
            settings={
                'response_type': (Stats,),
                'auth': [],
                'endpoint_path': '/stats',
                'operation_id': 'get_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_statistics
        )

        def __get_tx(
            self,
            currency,
            tx_hash,
            **kwargs
        ):
            """Returns details of a specific transaction identified by its hash.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_tx(currency, tx_hash, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                tx_hash (str): The transaction hash

            Keyword Args:
                include_io (bool): Whether to include inputs/outputs of a transaction (UTXO only). [optional] if omitted the server will use the default value of False
                token_tx_id (int): Select a specific token_transaction (Account model only). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tx
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['tx_hash'] = \
                tx_hash
            return self.call_with_http_info(**kwargs)

        self.get_tx = _Endpoint(
            settings={
                'response_type': (Tx,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/txs/{tx_hash}',
                'operation_id': 'get_tx',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'tx_hash',
                    'include_io',
                    'token_tx_id',
                ],
                'required': [
                    'currency',
                    'tx_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'tx_hash':
                        (str,),
                    'include_io':
                        (bool,),
                    'token_tx_id':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'tx_hash': 'tx_hash',
                    'include_io': 'include_io',
                    'token_tx_id': 'token_tx_id',
                },
                'location_map': {
                    'currency': 'path',
                    'tx_hash': 'path',
                    'include_io': 'query',
                    'token_tx_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_tx
        )

        def __get_tx_io(
            self,
            currency,
            tx_hash,
            io,
            **kwargs
        ):
            """Returns input/output values of a specific transaction identified by its hash.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_tx_io(currency, tx_hash, io, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                tx_hash (str): The transaction hash
                io (str): Input or outpus values of a transaction

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TxValues
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['tx_hash'] = \
                tx_hash
            kwargs['io'] = \
                io
            return self.call_with_http_info(**kwargs)

        self.get_tx_io = _Endpoint(
            settings={
                'response_type': (TxValues,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/txs/{tx_hash}/{io}',
                'operation_id': 'get_tx_io',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'tx_hash',
                    'io',
                ],
                'required': [
                    'currency',
                    'tx_hash',
                    'io',
                ],
                'nullable': [
                ],
                'enum': [
                    'io',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('io',): {

                        "INPUTS": "inputs",
                        "OUTPUTS": "outputs"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'tx_hash':
                        (str,),
                    'io':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'tx_hash': 'tx_hash',
                    'io': 'io',
                },
                'location_map': {
                    'currency': 'path',
                    'tx_hash': 'path',
                    'io': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_tx_io
        )

        def __list_address_links(
            self,
            currency,
            address,
            neighbor,
            **kwargs
        ):
            """Get outgoing transactions between two addresses  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address_links(currency, address, neighbor, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address
                neighbor (str): Neighbor address

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Links
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            kwargs['neighbor'] = \
                neighbor
            return self.call_with_http_info(**kwargs)

        self.list_address_links = _Endpoint(
            settings={
                'response_type': (Links,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}/links',
                'operation_id': 'list_address_links',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                    'neighbor',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'address',
                    'neighbor',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                    'neighbor':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                    'neighbor': 'neighbor',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                    'neighbor': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address_links
        )

        def __list_address_neighbors(
            self,
            currency,
            address,
            direction,
            **kwargs
        ):
            """Get an address's neighbors in the address graph  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address_neighbors(currency, address, direction, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address
                direction (str): Incoming or outgoing neighbors

            Keyword Args:
                only_ids ([str]): Restrict result to given set of comma separated addresses. [optional]
                include_labels (bool): Whether to include labels of first page of address tags. [optional] if omitted the server will use the default value of False
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NeighborAddresses
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            kwargs['direction'] = \
                direction
            return self.call_with_http_info(**kwargs)

        self.list_address_neighbors = _Endpoint(
            settings={
                'response_type': (NeighborAddresses,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}/neighbors',
                'operation_id': 'list_address_neighbors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                    'direction',
                    'only_ids',
                    'include_labels',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'address',
                    'direction',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                    'direction':
                        (str,),
                    'only_ids':
                        ([str],),
                    'include_labels':
                        (bool,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                    'direction': 'direction',
                    'only_ids': 'only_ids',
                    'include_labels': 'include_labels',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                    'direction': 'query',
                    'only_ids': 'query',
                    'include_labels': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                    'only_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address_neighbors
        )

        def __list_address_tags(
            self,
            label,
            **kwargs
        ):
            """Returns address tags associated with a given label  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address_tags(label, async_req=True)
            >>> result = thread.get()

            Args:
                label (str): The label of an entity

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTags
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label'] = \
                label
            return self.call_with_http_info(**kwargs)

        self.list_address_tags = _Endpoint(
            settings={
                'response_type': (AddressTags,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/tags',
                'operation_id': 'list_address_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'label',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'label',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'label': 'label',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'label': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address_tags
        )

        def __list_address_tags_by_entity(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get address tags for a given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address_tags_by_entity(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTags
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_address_tags_by_entity = _Endpoint(
            settings={
                'response_type': (AddressTags,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/tags',
                'operation_id': 'list_address_tags_by_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address_tags_by_entity
        )

        def __list_address_txs(
            self,
            currency,
            address,
            **kwargs
        ):
            """Get all transactions an address has been involved in  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address_txs(currency, address, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address

            Keyword Args:
                direction (str): Incoming or outgoing transactions. [optional]
                min_height (Height): Return transactions starting from given height. [optional]
                max_height (Height): Return transactions up to (including) given height. [optional]
                token_currency (str): Return transactions of given token currency. [optional]
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTxs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.list_address_txs = _Endpoint(
            settings={
                'response_type': (AddressTxs,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}/txs',
                'operation_id': 'list_address_txs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                    'direction',
                    'min_height',
                    'max_height',
                    'token_currency',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                    'direction':
                        (str,),
                    'min_height':
                        (Height,),
                    'max_height':
                        (Height,),
                    'token_currency':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                    'direction': 'direction',
                    'min_height': 'min_height',
                    'max_height': 'max_height',
                    'token_currency': 'token_currency',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                    'direction': 'query',
                    'min_height': 'query',
                    'max_height': 'query',
                    'token_currency': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address_txs
        )

        def __list_block_txs(
            self,
            currency,
            height,
            **kwargs
        ):
            """Get block transactions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_block_txs(currency, height, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                height (Height): The block height

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tx]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['height'] = \
                height
            return self.call_with_http_info(**kwargs)

        self.list_block_txs = _Endpoint(
            settings={
                'response_type': ([Tx],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/blocks/{height}/txs',
                'operation_id': 'list_block_txs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'height',
                ],
                'required': [
                    'currency',
                    'height',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'height':
                        (Height,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'height': 'height',
                },
                'location_map': {
                    'currency': 'path',
                    'height': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_block_txs
        )

        def __list_concepts(
            self,
            taxonomy,
            **kwargs
        ):
            """Returns the supported concepts of a taxonomy  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_concepts(taxonomy, async_req=True)
            >>> result = thread.get()

            Args:
                taxonomy (str): The taxonomy

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Concept]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['taxonomy'] = \
                taxonomy
            return self.call_with_http_info(**kwargs)

        self.list_concepts = _Endpoint(
            settings={
                'response_type': ([Concept],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/tags/taxonomies/{taxonomy}/concepts',
                'operation_id': 'list_concepts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'taxonomy',
                ],
                'required': [
                    'taxonomy',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'taxonomy':
                        (str,),
                },
                'attribute_map': {
                    'taxonomy': 'taxonomy',
                },
                'location_map': {
                    'taxonomy': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_concepts
        )

        def __list_entity_addresses(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get an entity's addresses  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_addresses(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityAddresses
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_entity_addresses = _Endpoint(
            settings={
                'response_type': (EntityAddresses,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/addresses',
                'operation_id': 'list_entity_addresses',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_addresses
        )

        def __list_entity_links(
            self,
            currency,
            entity,
            neighbor,
            **kwargs
        ):
            """Get transactions between two entities  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_links(currency, entity, neighbor, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID
                neighbor (int): Neighbor entity

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Links
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['neighbor'] = \
                neighbor
            return self.call_with_http_info(**kwargs)

        self.list_entity_links = _Endpoint(
            settings={
                'response_type': (Links,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/links',
                'operation_id': 'list_entity_links',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'neighbor',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                    'neighbor',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'neighbor':
                        (int,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'neighbor': 'neighbor',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'neighbor': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_links
        )

        def __list_entity_neighbors(
            self,
            currency,
            entity,
            direction,
            **kwargs
        ):
            """Get an entity's direct neighbors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_neighbors(currency, entity, direction, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID
                direction (str): Incoming or outgoing neighbors

            Keyword Args:
                only_ids ([int]): Restrict result to given set of comma separated IDs. [optional]
                include_labels (bool): Whether to include labels of first page of address tags. [optional] if omitted the server will use the default value of False
                exclude_best_address_tag (bool): Whether to exclude the best address tag. [optional] if omitted the server will use the default value of False
                include_actors (bool): Whether to include the actors. [optional] if omitted the server will use the default value of False
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NeighborEntities
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['direction'] = \
                direction
            return self.call_with_http_info(**kwargs)

        self.list_entity_neighbors = _Endpoint(
            settings={
                'response_type': (NeighborEntities,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/neighbors',
                'operation_id': 'list_entity_neighbors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                    'only_ids',
                    'include_labels',
                    'exclude_best_address_tag',
                    'include_actors',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                    'direction',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                    'only_ids':
                        ([int],),
                    'include_labels':
                        (bool,),
                    'exclude_best_address_tag':
                        (bool,),
                    'include_actors':
                        (bool,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                    'only_ids': 'only_ids',
                    'include_labels': 'include_labels',
                    'exclude_best_address_tag': 'exclude_best_address_tag',
                    'include_actors': 'include_actors',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                    'only_ids': 'query',
                    'include_labels': 'query',
                    'exclude_best_address_tag': 'query',
                    'include_actors': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                    'only_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_neighbors
        )

        def __list_entity_txs(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get all transactions an entity has been involved in  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_txs(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                direction (str): Incoming or outgoing transactions. [optional]
                min_height (Height): Return transactions starting from given height. [optional]
                max_height (Height): Return transactions up to (including) given height. [optional]
                token_currency (str): Return transactions of given token currency. [optional]
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTxs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_entity_txs = _Endpoint(
            settings={
                'response_type': (AddressTxs,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/txs',
                'operation_id': 'list_entity_txs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                    'min_height',
                    'max_height',
                    'token_currency',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                    'min_height':
                        (Height,),
                    'max_height':
                        (Height,),
                    'token_currency':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                    'min_height': 'min_height',
                    'max_height': 'max_height',
                    'token_currency': 'token_currency',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                    'min_height': 'query',
                    'max_height': 'query',
                    'token_currency': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_txs
        )

        def __list_supported_tokens(
            self,
            currency,
            **kwargs
        ):
            """Returns a list of supported token (sub)currencies.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_supported_tokens(currency, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TokenConfigs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            return self.call_with_http_info(**kwargs)

        self.list_supported_tokens = _Endpoint(
            settings={
                'response_type': (TokenConfigs,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/supported_tokens',
                'operation_id': 'list_supported_tokens',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                ],
                'required': [
                    'currency',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                },
                'location_map': {
                    'currency': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_supported_tokens
        )

        def __list_tags_by_address(
            self,
            currency,
            address,
            **kwargs
        ):
            """Get attribution tags for a given address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_tags_by_address(currency, address, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                address (str): The cryptocurrency address

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressTags
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.list_tags_by_address = _Endpoint(
            settings={
                'response_type': (AddressTags,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/addresses/{address}/tags',
                'operation_id': 'list_tags_by_address',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'address',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'address':
                        (str,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'address': 'address',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'address': 'path',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_tags_by_address
        )

        def __list_taxonomies(
            self,
            **kwargs
        ):
            """Returns the supported taxonomies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_taxonomies(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Taxonomy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_taxonomies = _Endpoint(
            settings={
                'response_type': ([Taxonomy],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/tags/taxonomies',
                'operation_id': 'list_taxonomies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_taxonomies
        )

        def __list_token_txs(
            self,
            currency,
            tx_hash,
            **kwargs
        ):
            """Returns all token transactions in a given transaction  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_token_txs(currency, tx_hash, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                tx_hash (str): The transaction hash

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TxsAccount
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['tx_hash'] = \
                tx_hash
            return self.call_with_http_info(**kwargs)

        self.list_token_txs = _Endpoint(
            settings={
                'response_type': (TxsAccount,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/token_txs/{tx_hash}',
                'operation_id': 'list_token_txs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'tx_hash',
                ],
                'required': [
                    'currency',
                    'tx_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'tx_hash':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'tx_hash': 'tx_hash',
                },
                'location_map': {
                    'currency': 'path',
                    'tx_hash': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_token_txs
        )

        def __search(
            self,
            q,
            **kwargs
        ):
            """Returns matching addresses, transactions and labels  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search(q, async_req=True)
            >>> result = thread.get()

            Args:
                q (str): It can be (the beginning of) an address, a transaction or a label

            Keyword Args:
                currency (str): The cryptocurrency (e.g., btc). [optional]
                limit (int): Maximum number of search results. [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['q'] = \
                q
            return self.call_with_http_info(**kwargs)

        self.search = _Endpoint(
            settings={
                'response_type': (SearchResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/search',
                'operation_id': 'search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'currency',
                    'limit',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'q',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('q',): {

                        'min_length': 3,
                    },
                    ('limit',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'currency':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'q': 'q',
                    'currency': 'currency',
                    'limit': 'limit',
                },
                'location_map': {
                    'q': 'query',
                    'currency': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search
        )

        def __search_entity_neighbors(
            self,
            currency,
            entity,
            direction,
            key,
            value,
            depth,
            **kwargs
        ):
            """Search deeply for matching neighbors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_entity_neighbors(currency, entity, direction, key, value, depth, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency code (e.g., btc)
                entity (int): The entity ID
                direction (str): Incoming or outgoing neighbors
                key (str): Match neighbors against one and only one of these properties: - the category the entity belongs to - addresses the entity contains - entity ids - total_received: amount the entity received in total - balance: amount the entity holds finally
                value ([str]): If key is - category: comma separated list of category names - addresses: comma separated list of address IDs - entities: comma separated list of entity IDs - total_received/balance: comma separated tuple of (currency, min, max) where currency is 'value' for the cryptocurrency value or an ISO currency code
                depth (int): How many hops should the transaction graph be searched

            Keyword Args:
                breadth (int): How many siblings of each neighbor should be tried. [optional] if omitted the server will use the default value of 16
                skip_num_addresses (int): Skip entities containing more addresses. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchResultLevel1]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['direction'] = \
                direction
            kwargs['key'] = \
                key
            kwargs['value'] = \
                value
            kwargs['depth'] = \
                depth
            return self.call_with_http_info(**kwargs)

        self.search_entity_neighbors = _Endpoint(
            settings={
                'response_type': ([SearchResultLevel1],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/search',
                'operation_id': 'search_entity_neighbors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                    'key',
                    'value',
                    'depth',
                    'breadth',
                    'skip_num_addresses',
                ],
                'required': [
                    'currency',
                    'entity',
                    'direction',
                    'key',
                    'value',
                    'depth',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                    'key',
                ],
                'validation': [
                    'depth',
                ]
            },
            root_map={
                'validations': {
                    ('depth',): {

                        'inclusive_maximum': 7,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                    ('key',): {

                        "CATEGORY": "category",
                        "ADDRESSES": "addresses",
                        "ENTITIES": "entities",
                        "TOTAL_RECEIVED": "total_received",
                        "BALANCE": "balance"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                    'key':
                        (str,),
                    'value':
                        ([str],),
                    'depth':
                        (int,),
                    'breadth':
                        (int,),
                    'skip_num_addresses':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                    'key': 'key',
                    'value': 'value',
                    'depth': 'depth',
                    'breadth': 'breadth',
                    'skip_num_addresses': 'skip_num_addresses',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                    'key': 'query',
                    'value': 'query',
                    'depth': 'query',
                    'breadth': 'query',
                    'skip_num_addresses': 'query',
                },
                'collection_format_map': {
                    'value': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_entity_neighbors
        )

class DataFrameApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_csv(self, 
        currency,
        operation,
        num_pages,
        body,
        ck=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'operation' != 'currency':
            body['operation'] = operation
        if 'num_pages' != 'currency':
            body['num_pages'] = num_pages
        if 'body' != 'currency':
            body['body'] = body
        if 'ck' != 'currency':
            body['ck'] = ck
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "bulk_csv",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def bulk_json(self, 
        currency,
        operation,
        num_pages,
        body,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'operation' != 'currency':
            body['operation'] = operation
        if 'num_pages' != 'currency':
            body['num_pages'] = num_pages
        if 'body' != 'currency':
            body['body'] = body
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "bulk_json",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_actor(self, 
        actor,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'actor' != 'currency':
            body['actor'] = actor
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_actor",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_actor_tags(self, 
        actor,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'actor' != 'currency':
            body['actor'] = actor
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_actor_tags",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_address(self, 
        currency,
        address,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_address",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_address_entity(self, 
        currency,
        address,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_address_entity",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_block(self, 
        currency,
        height,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'height' != 'currency':
            body['height'] = height
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_block",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_entity(self, 
        currency,
        entity,
        exclude_best_address_tag=False,
        include_actors=False,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'exclude_best_address_tag' != 'currency':
            body['exclude_best_address_tag'] = exclude_best_address_tag
        if 'include_actors' != 'currency':
            body['include_actors'] = include_actors
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_entity",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_exchange_rates(self, 
        currency,
        height,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'height' != 'currency':
            body['height'] = height
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_exchange_rates",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_statistics(self, 
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_statistics",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_tx(self, 
        currency,
        tx_hash,
        include_io=False,
        token_tx_id=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'tx_hash' != 'currency':
            body['tx_hash'] = tx_hash
        if 'include_io' != 'currency':
            body['include_io'] = include_io
        if 'token_tx_id' != 'currency':
            body['token_tx_id'] = token_tx_id
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_tx",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def get_tx_io(self, 
        currency,
        tx_hash,
        io,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'tx_hash' != 'currency':
            body['tx_hash'] = tx_hash
        if 'io' != 'currency':
            body['io'] = io
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "get_tx_io",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_address_links(self, 
        currency,
        address,
        neighbor,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        if 'neighbor' != 'currency':
            body['neighbor'] = neighbor
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_address_links",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_address_neighbors(self, 
        currency,
        address,
        direction,
        only_ids=None,
        include_labels=False,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        if 'direction' != 'currency':
            body['direction'] = direction
        if 'only_ids' != 'currency':
            body['only_ids'] = only_ids
        if 'include_labels' != 'currency':
            body['include_labels'] = include_labels
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_address_neighbors",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_address_tags(self, 
        label,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'label' != 'currency':
            body['label'] = label
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_address_tags",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_address_tags_by_entity(self, 
        currency,
        entity,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_address_tags_by_entity",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_address_txs(self, 
        currency,
        address,
        direction=None,
        min_height=None,
        max_height=None,
        token_currency=None,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        if 'direction' != 'currency':
            body['direction'] = direction
        if 'min_height' != 'currency':
            body['min_height'] = min_height
        if 'max_height' != 'currency':
            body['max_height'] = max_height
        if 'token_currency' != 'currency':
            body['token_currency'] = token_currency
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_address_txs",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_block_txs(self, 
        currency,
        height,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'height' != 'currency':
            body['height'] = height
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_block_txs",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_concepts(self, 
        taxonomy,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'taxonomy' != 'currency':
            body['taxonomy'] = taxonomy
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_concepts",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_entity_addresses(self, 
        currency,
        entity,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_entity_addresses",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_entity_links(self, 
        currency,
        entity,
        neighbor,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'neighbor' != 'currency':
            body['neighbor'] = neighbor
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_entity_links",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_entity_neighbors(self, 
        currency,
        entity,
        direction,
        only_ids=None,
        include_labels=False,
        exclude_best_address_tag=False,
        include_actors=False,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'direction' != 'currency':
            body['direction'] = direction
        if 'only_ids' != 'currency':
            body['only_ids'] = only_ids
        if 'include_labels' != 'currency':
            body['include_labels'] = include_labels
        if 'exclude_best_address_tag' != 'currency':
            body['exclude_best_address_tag'] = exclude_best_address_tag
        if 'include_actors' != 'currency':
            body['include_actors'] = include_actors
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_entity_neighbors",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_entity_txs(self, 
        currency,
        entity,
        direction=None,
        min_height=None,
        max_height=None,
        token_currency=None,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'direction' != 'currency':
            body['direction'] = direction
        if 'min_height' != 'currency':
            body['min_height'] = min_height
        if 'max_height' != 'currency':
            body['max_height'] = max_height
        if 'token_currency' != 'currency':
            body['token_currency'] = token_currency
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_entity_txs",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_supported_tokens(self, 
        currency,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_supported_tokens",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_tags_by_address(self, 
        currency,
        address,
        page=None,
        pagesize=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'address' != 'currency':
            body['address'] = address
        if 'page' != 'currency':
            body['page'] = page
        if 'pagesize' != 'currency':
            body['pagesize'] = pagesize
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_tags_by_address",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_taxonomies(self, 
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_taxonomies",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def list_token_txs(self, 
        currency,
        tx_hash,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'tx_hash' != 'currency':
            body['tx_hash'] = tx_hash
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "list_token_txs",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def search(self, 
        q,
        currency=None,
        limit=10,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'q' != 'currency':
            body['q'] = q
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'limit' != 'currency':
            body['limit'] = limit
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "search",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))

    def search_entity_neighbors(self, 
        currency,
        entity,
        direction,
        key,
        value,
        depth,
        breadth=16,
        skip_num_addresses=None,
        **kwargs):
        kwargs['_preload_content'] = False
        body = {}
        if 'currency' != 'currency':
            body['currency'] = currency
        if 'entity' != 'currency':
            body['entity'] = entity
        if 'direction' != 'currency':
            body['direction'] = direction
        if 'key' != 'currency':
            body['key'] = key
        if 'value' != 'currency':
            body['value'] = value
        if 'depth' != 'currency':
            body['depth'] = depth
        if 'breadth' != 'currency':
            body['breadth'] = breadth
        if 'skip_num_addresses' != 'currency':
            body['skip_num_addresses'] = skip_num_addresses
        return pandas.read_csv(
            Api(self.api_client).bulk_csv(currency,
                                          "search_entity_neighbors",
                                          body=body,
                                          num_pages=1,
                                          **kwargs))
