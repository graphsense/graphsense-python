"""
    GraphSense API

    GraphSense API  # noqa: E501

    The version of the OpenAPI document: 0.4.5
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from graphsense.api_client import ApiClient, Endpoint as _Endpoint
from graphsense.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from graphsense.model.entities import Entities
from graphsense.model.entity import Entity
from graphsense.model.entity_addresses import EntityAddresses
from graphsense.model.neighbors import Neighbors
from graphsense.model.search_result_level1 import SearchResultLevel1
from graphsense.model.tags import Tags


class EntitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_entity(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get an entity, optionally with tags  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_entity(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                include_tags (bool): Whether tags should be included. [optional] if omitted the server will use the default value of False
                tag_coherence (bool): Whether to calculate coherence of address tags. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Entity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.get_entity = _Endpoint(
            settings={
                'response_type': (Entity,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}',
                'operation_id': 'get_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'include_tags',
                    'tag_coherence',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'include_tags':
                        (bool,),
                    'tag_coherence':
                        (bool,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'include_tags': 'include_tags',
                    'tag_coherence': 'tag_coherence',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'include_tags': 'query',
                    'tag_coherence': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_entity
        )

        def __list_entities(
            self,
            currency,
            **kwargs
        ):
            """Get entities  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entities(currency, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)

            Keyword Args:
                ids ([str]): Restrict result to given set of comma separated IDs. [optional]
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Entities
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            return self.call_with_http_info(**kwargs)

        self.list_entities = _Endpoint(
            settings={
                'response_type': (Entities,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities',
                'operation_id': 'list_entities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'ids',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'ids':
                        ([str],),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'ids': 'ids',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'ids': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                    'ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entities
        )

        def __list_entities_csv(
            self,
            currency,
            ids,
            **kwargs
        ):
            """Get entities as CSV  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entities_csv(currency, ids, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                ids ([str]): Set of comma separated IDs

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['ids'] = \
                ids
            return self.call_with_http_info(**kwargs)

        self.list_entities_csv = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities.csv',
                'operation_id': 'list_entities_csv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'ids',
                ],
                'required': [
                    'currency',
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'ids':
                        ([str],),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'ids': 'ids',
                },
                'location_map': {
                    'currency': 'path',
                    'ids': 'query',
                },
                'collection_format_map': {
                    'ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/csv'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entities_csv
        )

        def __list_entity_addresses(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get an entity's addresses  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_addresses(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityAddresses
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_entity_addresses = _Endpoint(
            settings={
                'response_type': (EntityAddresses,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/addresses',
                'operation_id': 'list_entity_addresses',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_addresses
        )

        def __list_entity_addresses_csv(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get an entity's addresses as CSV  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_addresses_csv(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_entity_addresses_csv = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/addresses.csv',
                'operation_id': 'list_entity_addresses_csv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_addresses_csv
        )

        def __list_entity_neighbors(
            self,
            currency,
            entity,
            direction,
            **kwargs
        ):
            """Get an entity's neighbors in the entity graph  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_neighbors(currency, entity, direction, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID
                direction (str): Incoming or outgoing neighbors

            Keyword Args:
                ids ([str]): Restrict result to given set of comma separated IDs. [optional]
                include_labels (bool): Whether labels of tags should be included. [optional] if omitted the server will use the default value of False
                page (str): Resumption token for retrieving the next page. [optional]
                pagesize (int): Number of items returned in a single page. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Neighbors
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['direction'] = \
                direction
            return self.call_with_http_info(**kwargs)

        self.list_entity_neighbors = _Endpoint(
            settings={
                'response_type': (Neighbors,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/neighbors',
                'operation_id': 'list_entity_neighbors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                    'ids',
                    'include_labels',
                    'page',
                    'pagesize',
                ],
                'required': [
                    'currency',
                    'entity',
                    'direction',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                    'pagesize',
                ]
            },
            root_map={
                'validations': {
                    ('pagesize',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                    'ids':
                        ([str],),
                    'include_labels':
                        (bool,),
                    'page':
                        (str,),
                    'pagesize':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                    'ids': 'ids',
                    'include_labels': 'include_labels',
                    'page': 'page',
                    'pagesize': 'pagesize',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                    'ids': 'query',
                    'include_labels': 'query',
                    'page': 'query',
                    'pagesize': 'query',
                },
                'collection_format_map': {
                    'ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_neighbors
        )

        def __list_entity_neighbors_csv(
            self,
            currency,
            entity,
            direction,
            **kwargs
        ):
            """Get an entity's neighbors in the entity graph as CSV  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_entity_neighbors_csv(currency, entity, direction, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID
                direction (str): Incoming or outgoing neighbors

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['direction'] = \
                direction
            return self.call_with_http_info(**kwargs)

        self.list_entity_neighbors_csv = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/neighbors.csv',
                'operation_id': 'list_entity_neighbors_csv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                ],
                'required': [
                    'currency',
                    'entity',
                    'direction',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_entity_neighbors_csv
        )

        def __list_tags_by_entity(
            self,
            currency,
            entity,
            **kwargs
        ):
            """Get tags for a given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_tags_by_entity(currency, entity, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID

            Keyword Args:
                tag_coherence (bool): Whether to calculate coherence of address tags. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tags
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.list_tags_by_entity = _Endpoint(
            settings={
                'response_type': (Tags,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/tags',
                'operation_id': 'list_tags_by_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'tag_coherence',
                ],
                'required': [
                    'currency',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'tag_coherence':
                        (bool,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'tag_coherence': 'tag_coherence',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'tag_coherence': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_tags_by_entity
        )

        def __list_tags_by_entity_by_level_csv(
            self,
            currency,
            entity,
            level,
            **kwargs
        ):
            """Get address or entity tags for a given entity as CSV  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_tags_by_entity_by_level_csv(currency, entity, level, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID
                level (str): Whether tags on the address or entity level are requested

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['level'] = \
                level
            return self.call_with_http_info(**kwargs)

        self.list_tags_by_entity_by_level_csv = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/tags.csv',
                'operation_id': 'list_tags_by_entity_by_level_csv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'level',
                ],
                'required': [
                    'currency',
                    'entity',
                    'level',
                ],
                'nullable': [
                ],
                'enum': [
                    'level',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('level',): {

                        "ADDRESS": "address",
                        "ENTITY": "entity"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'level':
                        (str,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'level': 'level',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'level': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/csv'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_tags_by_entity_by_level_csv
        )

        def __search_entity_neighbors(
            self,
            currency,
            entity,
            direction,
            key,
            value,
            depth,
            **kwargs
        ):
            """Search deeply for matching neighbors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_entity_neighbors(currency, entity, direction, key, value, depth, async_req=True)
            >>> result = thread.get()

            Args:
                currency (str): The cryptocurrency (e.g., btc)
                entity (int): The entity ID
                direction (str): Incoming or outgoing neighbors
                key (str): Match neighbors against one and only one of these properties: - the category the entity belongs to - addresses the entity contains - total_received: amount the entity received in total - balance: amount the entity holds finally
                value ([str]): If key is - category: comma separated list of category names - addresses: comma separated list of address IDs - entities: comma separated list of entity IDs - total_received/balance: comma separated tuple of (currency, min, max)
                depth (int): How many hops should the transaction graph be searched

            Keyword Args:
                breadth (int): How many siblings of each neighbor should be tried. [optional] if omitted the server will use the default value of 16
                skip_num_addresses (int): Skip entities containing more addresses. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchResultLevel1]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['currency'] = \
                currency
            kwargs['entity'] = \
                entity
            kwargs['direction'] = \
                direction
            kwargs['key'] = \
                key
            kwargs['value'] = \
                value
            kwargs['depth'] = \
                depth
            return self.call_with_http_info(**kwargs)

        self.search_entity_neighbors = _Endpoint(
            settings={
                'response_type': ([SearchResultLevel1],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/{currency}/entities/{entity}/search',
                'operation_id': 'search_entity_neighbors',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency',
                    'entity',
                    'direction',
                    'key',
                    'value',
                    'depth',
                    'breadth',
                    'skip_num_addresses',
                ],
                'required': [
                    'currency',
                    'entity',
                    'direction',
                    'key',
                    'value',
                    'depth',
                ],
                'nullable': [
                ],
                'enum': [
                    'direction',
                    'key',
                ],
                'validation': [
                    'depth',
                ]
            },
            root_map={
                'validations': {
                    ('depth',): {

                        'inclusive_maximum': 7,
                    },
                },
                'allowed_values': {
                    ('direction',): {

                        "IN": "in",
                        "OUT": "out"
                    },
                    ('key',): {

                        "CATEGORY": "category",
                        "ADDRESSES": "addresses",
                        "ENTITIES": "entities",
                        "TOTAL_RECEIVED": "total_received",
                        "BALANCE": "balance"
                    },
                },
                'openapi_types': {
                    'currency':
                        (str,),
                    'entity':
                        (int,),
                    'direction':
                        (str,),
                    'key':
                        (str,),
                    'value':
                        ([str],),
                    'depth':
                        (int,),
                    'breadth':
                        (int,),
                    'skip_num_addresses':
                        (int,),
                },
                'attribute_map': {
                    'currency': 'currency',
                    'entity': 'entity',
                    'direction': 'direction',
                    'key': 'key',
                    'value': 'value',
                    'depth': 'depth',
                    'breadth': 'breadth',
                    'skip_num_addresses': 'skip_num_addresses',
                },
                'location_map': {
                    'currency': 'path',
                    'entity': 'path',
                    'direction': 'query',
                    'key': 'query',
                    'value': 'query',
                    'depth': 'query',
                    'breadth': 'query',
                    'skip_num_addresses': 'query',
                },
                'collection_format_map': {
                    'value': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_entity_neighbors
        )
